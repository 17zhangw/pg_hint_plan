LOAD 'pg_hint_plan';
SET pg_hint_plan.enable TO on;
SET pg_hint_plan.debug_print TO on;
SET client_min_messages TO LOG;
SET search_path TO public;
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

----
---- No. J-1-1 specified pattern of the object name
----
-- No. J-1-1-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-1-2
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1 t_1, s1.t2 t_2 WHERE t_1.c1 = t_2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(t1 t2)
duplication hint:
error hint:

                QUERY PLAN                
------------------------------------------
 Merge Join
   Merge Cond: (t_1.c1 = t_2.c1)
   ->  Index Scan using t1_pkey on t1 t_1
   ->  Sort
         Sort Key: t_2.c1
         ->  Seq Scan on t2 t_2
(6 rows)

-- No. J-1-1-3
/*+HashJoin(t_1 t_2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1 t_1, s1.t2 t_2 WHERE t_1.c1 = t_2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t_1 t_2)
not used hint:
duplication hint:
error hint:

           QUERY PLAN           
--------------------------------
 Hash Join
   Hash Cond: (t_1.c1 = t_2.c1)
   ->  Seq Scan on t1 t_1
   ->  Hash
         ->  Seq Scan on t2 t_2
(5 rows)

----
---- No. J-1-2 specified schema name in the hint option
----
-- No. J-1-2-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-2-2
/*+HashJoin(s1.t1 s1.t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(s1.t1 s1.t2)
duplication hint:
error hint:

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

----
---- No. J-1-3 table doesn't exist in the hint option
----
-- No. J-1-3-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-3-1
/*+HashJoin(t3 t4)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(t3 t4)
duplication hint:
error hint:

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

----
---- No. J-1-4 conflict table name
----
-- No. J-1-4-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-4-2
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 WHERE s1.t1.c1 = s2.t1.c1;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (s1.t1.c1 = s2.t1.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: s2.t1.c1
         ->  Seq Scan on t1
(6 rows)

/*+HashJoin(t1 t1)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 WHERE s1.t1.c1 = s2.t1.c1;
INFO:  hint syntax error at or near "HashJoin(t1 t1)"
DETAIL:  Relation name "t1" is ambiguous.
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(t1 t1)
duplication hint:
error hint:

EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 WHERE s1.t1.c1 = s2.t1.c1;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (s1.t1.c1 = s2.t1.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: s2.t1.c1
         ->  Seq Scan on t1
(6 rows)

/*+HashJoin(s1.t1 s2.t1)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 WHERE s1.t1.c1 = s2.t1.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(s1.t1 s2.t1)
duplication hint:
error hint:

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (s1.t1.c1 = s2.t1.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: s2.t1.c1
         ->  Seq Scan on t1
(6 rows)

EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 s2t1 WHERE s1.t1.c1 = s2t1.c1;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = s2t1.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: s2t1.c1
         ->  Seq Scan on t1 s2t1
(6 rows)

/*+HashJoin(t1 s2t1)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s2.t1 s2t1 WHERE s1.t1.c1 = s2t1.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(s2t1 t1)
not used hint:
duplication hint:
error hint:

           QUERY PLAN            
---------------------------------
 Hash Join
   Hash Cond: (t1.c1 = s2t1.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t1 s2t1
(5 rows)

-- No. J-1-4-3
EXPLAIN (COSTS false) SELECT *, (SELECT max(t1.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
                     QUERY PLAN                     
----------------------------------------------------
 Merge Join
   Merge Cond: (s1.t1.c1 = s1.t2.c1)
   InitPlan 1 (returns $0)
     ->  Aggregate
           ->  Merge Join
                 Merge Cond: (s1.t1.c1 = s1.t2.c1)
                 ->  Index Scan using t1_pkey on t1
                 ->  Sort
                       Sort Key: s1.t2.c1
                       ->  Seq Scan on t2
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: s1.t2.c1
         ->  Seq Scan on t2
(14 rows)

/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT *, (SELECT max(t1.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

                    QUERY PLAN                    
--------------------------------------------------
 Hash Join
   Hash Cond: (s1.t1.c1 = s1.t2.c1)
   InitPlan 1 (returns $0)
     ->  Aggregate
           ->  Hash Join
                 Hash Cond: (s1.t1.c1 = s1.t2.c1)
                 ->  Seq Scan on t1
                 ->  Hash
                       ->  Seq Scan on t2
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(12 rows)

/*+NestLoop(st1 st2)HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT *, (SELECT max(st1.c1) FROM s1.t1 st1, s1.t2 st2 WHERE st1.c1 = st2.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
NestLoop(st1 st2)
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

                       QUERY PLAN                       
--------------------------------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   InitPlan 1 (returns $1)
     ->  Aggregate
           ->  Nested Loop
                 ->  Seq Scan on t2 st2
                 ->  Index Scan using t1_pkey on t1 st1
                       Index Cond: (c1 = st2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(11 rows)

----
---- No. J-1-5 conflict table name
----
-- No. J-1-5-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-5-2
/*+HashJoin(t1 t1)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
INFO:  hint syntax error at or near "HashJoin(t1 t1)"
DETAIL:  Relation name "t1" is duplicate.
LOG:  pg_hint_plan:
used hint:
not used hint:
duplication hint:
error hint:
HashJoin(t1 t1)

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

-- No. J-1-5-3
/*+HashJoin(t1 t1)HashJoin(t2 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
INFO:  hint syntax error at or near "HashJoin(t1 t1)HashJoin(t2 t2)"
DETAIL:  Relation name "t1" is duplicate.
INFO:  hint syntax error at or near "HashJoin(t2 t2)"
DETAIL:  Relation name "t2" is duplicate.
LOG:  pg_hint_plan:
used hint:
not used hint:
duplication hint:
error hint:
HashJoin(t1 t1)
HashJoin(t2 t2)

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2, s1.t3 WHERE t1.c1 = t2.c1 AND t1.c1 = t3.c1;
                 QUERY PLAN                 
--------------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Merge Join
         Merge Cond: (t1.c1 = t3.c1)
         ->  Index Scan using t1_pkey on t1
         ->  Index Scan using t3_pkey on t3
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(9 rows)

/*+HashJoin(t1 t2 t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2, s1.t3, s1.t4 WHERE t1.c1 = t2.c1 AND t1.c1 = t3.c1 AND t1.c1 = t4.c1;
INFO:  hint syntax error at or near "HashJoin(t1 t2 t1 t2)"
DETAIL:  Relation name "t1" is duplicate.
LOG:  pg_hint_plan:
used hint:
not used hint:
duplication hint:
error hint:
HashJoin(t1 t1 t2 t2)

                    QUERY PLAN                    
--------------------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Merge Join
         Merge Cond: (t1.c1 = t4.c1)
         ->  Merge Join
               Merge Cond: (t1.c1 = t3.c1)
               ->  Index Scan using t1_pkey on t1
               ->  Index Scan using t3_pkey on t3
         ->  Index Scan using t4_pkey on t4
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(12 rows)

----
---- No. J-1-6 object type for the hint
----
-- No. J-1-6-1
/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

-- No. J-1-6-2
EXPLAIN (COSTS false) SELECT * FROM s1.p1 t1, s1.p1 t2 WHERE t1.c1 = t2.c1;
              QUERY PLAN               
---------------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Append
         ->  Seq Scan on p1 t1
         ->  Seq Scan on p1c1 t1
         ->  Seq Scan on p1c2 t1
         ->  Seq Scan on p1c3 t1
   ->  Hash
         ->  Append
               ->  Seq Scan on p1 t2
               ->  Seq Scan on p1c1 t2
               ->  Seq Scan on p1c2 t2
               ->  Seq Scan on p1c3 t2
(13 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.p1 t1, s1.p1 t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
NestLoop(t1 t2)
not used hint:
duplication hint:
error hint:

                        QUERY PLAN                         
-----------------------------------------------------------
 Nested Loop
   Join Filter: (t1.c1 = t2.c1)
   ->  Append
         ->  Seq Scan on p1 t1
         ->  Seq Scan on p1c1 t1
         ->  Seq Scan on p1c2 t1
         ->  Seq Scan on p1c3 t1
   ->  Append
         ->  Index Scan using p1_pkey on p1 t2
               Index Cond: ((c1 = t1.c1) AND (c1 = t1.c1))
         ->  Index Scan using p1c1_i on p1c1 t2
               Index Cond: ((c1 = t1.c1) AND (c1 = t1.c1))
         ->  Index Scan using p1c2_i on p1c2 t2
               Index Cond: ((c1 = t1.c1) AND (c1 = t1.c1))
         ->  Index Scan using p1c3_i on p1c3 t2
               Index Cond: ((c1 = t1.c1) AND (c1 = t1.c1))
(16 rows)

-- No. J-1-6-3
EXPLAIN (COSTS false) SELECT * FROM s1.ul1 t1, s1.ul1 t2 WHERE t1.c1 = t2.c1;
           QUERY PLAN           
--------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on ul1 t1
   ->  Hash
         ->  Seq Scan on ul1 t2
(5 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.ul1 t1, s1.ul1 t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
NestLoop(t1 t2)
not used hint:
duplication hint:
error hint:

                QUERY PLAN                 
-------------------------------------------
 Nested Loop
   ->  Seq Scan on ul1 t1
   ->  Index Scan using ul1_pkey on ul1 t2
         Index Cond: (c1 = t1.c1)
(4 rows)

-- No. J-1-6-4
CREATE TEMP TABLE tm1 (LIKE s1.t1 INCLUDING ALL);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "tm1_pkey" for table "tm1"
EXPLAIN (COSTS false) SELECT * FROM tm1 t1, tm1 t2 WHERE t1.c1 = t2.c1;
           QUERY PLAN           
--------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on tm1 t1
   ->  Hash
         ->  Seq Scan on tm1 t2
(5 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM tm1 t1, tm1 t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
NestLoop(t1 t2)
not used hint:
duplication hint:
error hint:

                QUERY PLAN                 
-------------------------------------------
 Nested Loop
   ->  Seq Scan on tm1 t1
   ->  Index Scan using tm1_pkey on tm1 t2
         Index Cond: (c1 = t1.c1)
(4 rows)

-- No. J-1-6-5
EXPLAIN (COSTS false) SELECT * FROM pg_catalog.pg_class t1, pg_catalog.pg_class t2 WHERE t1.oid = t2.oid;
             QUERY PLAN              
-------------------------------------
 Hash Join
   Hash Cond: (t1.oid = t2.oid)
   ->  Seq Scan on pg_class t1
   ->  Hash
         ->  Seq Scan on pg_class t2
(5 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM pg_catalog.pg_class t1, pg_catalog.pg_class t2 WHERE t1.oid = t2.oid;
LOG:  pg_hint_plan:
used hint:
NestLoop(t1 t2)
not used hint:
duplication hint:
error hint:

                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   ->  Seq Scan on pg_class t1
   ->  Index Scan using pg_class_oid_index on pg_class t2
         Index Cond: (oid = t1.oid)
(4 rows)

-- No. J-1-6-6
-- refer fdw.sql
-- No. J-1-6-7
EXPLAIN (COSTS false) SELECT * FROM s1.f1() t1, s1.f1() t2 WHERE t1.c1 = t2.c1;
           QUERY PLAN           
--------------------------------
 Nested Loop
   Join Filter: (t1.c1 = t2.c1)
   ->  Function Scan on f1 t1
   ->  Function Scan on f1 t2
(4 rows)

/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.f1() t1, s1.f1() t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

             QUERY PLAN             
------------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Function Scan on f1 t1
   ->  Hash
         ->  Function Scan on f1 t2
(5 rows)

-- No. J-1-6-8
EXPLAIN (COSTS false) SELECT * FROM (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t1 (c1, c2, c3, c4), (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t2 (c1, c2, c3, c4) WHERE t1.c1 = t2.c1;
                       QUERY PLAN                       
--------------------------------------------------------
 Hash Join
   Hash Cond: ("*VALUES*".column1 = "*VALUES*".column1)
   ->  Values Scan on "*VALUES*"
   ->  Hash
         ->  Values Scan on "*VALUES*"
(5 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t1 (c1, c2, c3, c4), (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t2 (c1, c2, c3, c4) WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
NestLoop(t1 t2)
duplication hint:
error hint:

                       QUERY PLAN                       
--------------------------------------------------------
 Hash Join
   Hash Cond: ("*VALUES*".column1 = "*VALUES*".column1)
   ->  Values Scan on "*VALUES*"
   ->  Hash
         ->  Values Scan on "*VALUES*"
(5 rows)

/*+NestLoop(*VALUES* *VALUES*)*/
EXPLAIN (COSTS false) SELECT * FROM (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t1 (c1, c2, c3, c4), (VALUES(1,1,1,'1'), (2,2,2,'2'), (3,3,3,'3')) AS t2 (c1, c2, c3, c4) WHERE t1.c1 = t2.c1;
INFO:  hint syntax error at or near "NestLoop(*VALUES* *VALUES*)"
DETAIL:  Relation name "*VALUES*" is ambiguous.
ERROR:  negative bitmapset member not allowed
-- No. J-1-6-9
EXPLAIN (COSTS false) WITH c1(c1) AS (SELECT max(t1.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1) SELECT * FROM s1.t1, c1 WHERE t1.c1 = c1.c1;
                     QUERY PLAN                     
----------------------------------------------------
 Nested Loop
   CTE c1
     ->  Aggregate
           ->  Merge Join
                 Merge Cond: (s1.t1.c1 = t2.c1)
                 ->  Index Scan using t1_pkey on t1
                 ->  Sort
                       Sort Key: t2.c1
                       ->  Seq Scan on t2
   ->  CTE Scan on c1
   ->  Index Scan using t1_pkey on t1
         Index Cond: (c1 = c1.c1)
(12 rows)

/*+NestLoop(t1 t2)HashJoin(t1 c1)*/
EXPLAIN (COSTS false) WITH c1(c1) AS (SELECT max(t1.c1) FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1) SELECT * FROM s1.t1, c1 WHERE t1.c1 = c1.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(c1 t1)
NestLoop(t1 t2)
not used hint:
duplication hint:
error hint:

                     QUERY PLAN                     
----------------------------------------------------
 Hash Join
   Hash Cond: (s1.t1.c1 = c1.c1)
   CTE c1
     ->  Aggregate
           ->  Nested Loop
                 ->  Seq Scan on t2
                 ->  Index Scan using t1_pkey on t1
                       Index Cond: (c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  CTE Scan on c1
(11 rows)

-- No. J-1-6-10
EXPLAIN (COSTS false) SELECT * FROM s1.v1 t1, s1.v1 t2 WHERE t1.c1 = t2.c1;
            QUERY PLAN            
----------------------------------
 Hash Join
   Hash Cond: (v1t1.c1 = v1t1.c1)
   ->  Seq Scan on t1 v1t1
   ->  Hash
         ->  Seq Scan on t1 v1t1
(5 rows)

/*+NestLoop(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.v1 t1, s1.v1 t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
NestLoop(t1 t2)
duplication hint:
error hint:

            QUERY PLAN            
----------------------------------
 Hash Join
   Hash Cond: (v1t1.c1 = v1t1.c1)
   ->  Seq Scan on t1 v1t1
   ->  Hash
         ->  Seq Scan on t1 v1t1
(5 rows)

/*+NestLoop(v1t1 v1t1_)*/
EXPLAIN (COSTS false) SELECT * FROM s1.v1 t1, s1.v1_ t2 WHERE t1.c1 = t2.c1;
LOG:  pg_hint_plan:
used hint:
NestLoop(v1t1 v1t1_)
not used hint:
duplication hint:
error hint:

                 QUERY PLAN                 
--------------------------------------------
 Nested Loop
   ->  Seq Scan on t1 v1t1
   ->  Index Scan using t1_pkey on t1 v1t1_
         Index Cond: (c1 = v1t1.c1)
(4 rows)

-- No. J-1-6-11
EXPLAIN (COSTS false) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1 AND t1.c1 = (SELECT max(st1.c1) FROM s1.t1 st1, s1.t2 st2 WHERE st1.c1 = st2.c1);
                       QUERY PLAN                       
--------------------------------------------------------
 Nested Loop
   InitPlan 1 (returns $0)
     ->  Aggregate
           ->  Merge Join
                 Merge Cond: (st1.c1 = st2.c1)
                 ->  Index Scan using t1_pkey on t1 st1
                 ->  Sort
                       Sort Key: st2.c1
                       ->  Seq Scan on t2 st2
   ->  Index Scan using t1_pkey on t1
         Index Cond: (c1 = $0)
   ->  Seq Scan on t2
         Filter: (c1 = $0)
(13 rows)

/*+MergeJoin(t1 t2)NestLoop(st1 st2)*/
EXPLAIN (COSTS true) SELECT * FROM s1.t1, s1.t2 WHERE t1.c1 = t2.c1 AND t1.c1 = (SELECT max(st1.c1) FROM s1.t1 st1, s1.t2 st2 WHERE st1.c1 = st2.c1);
LOG:  pg_hint_plan:
used hint:
NestLoop(st1 st2)
MergeJoin(t1 t2)
not used hint:
duplication hint:
error hint:

                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Nested Loop  (cost=10000000074.28..10000000084.81 rows=1 width=29)
   InitPlan 1 (returns $1)
     ->  Aggregate  (cost=74.27..74.28 rows=1 width=4)
           ->  Nested Loop  (cost=0.00..74.02 rows=100 width=4)
                 ->  Seq Scan on t2 st2  (cost=0.00..2.00 rows=100 width=4)
                 ->  Index Scan using t1_pkey on t1 st1  (cost=0.00..0.71 rows=1 width=4)
                       Index Cond: (c1 = st2.c1)
   ->  Index Scan using t1_pkey on t1  (cost=0.00..8.27 rows=1 width=15)
         Index Cond: (c1 = $1)
   ->  Seq Scan on t2  (cost=0.00..2.25 rows=1 width=14)
         Filter: (c1 = $1)
(11 rows)

EXPLAIN (COSTS false) SELECT * FROM s1.t1, (SELECT t2.c1 FROM s1.t2) st2 WHERE t1.c1 = st2.c1;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

/*+HashJoin(t1 st2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, (SELECT t2.c1 FROM s1.t2) st2 WHERE t1.c1 = st2.c1;
LOG:  pg_hint_plan:
used hint:
not used hint:
HashJoin(st2 t1)
duplication hint:
error hint:

              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.c1 = t2.c1)
   ->  Index Scan using t1_pkey on t1
   ->  Sort
         Sort Key: t2.c1
         ->  Seq Scan on t2
(6 rows)

/*+HashJoin(t1 t2)*/
EXPLAIN (COSTS false) SELECT * FROM s1.t1, (SELECT t2.c1 FROM s1.t2) st2 WHERE t1.c1 = st2.c1;
LOG:  pg_hint_plan:
used hint:
HashJoin(t1 t2)
not used hint:
duplication hint:
error hint:

          QUERY PLAN          
------------------------------
 Hash Join
   Hash Cond: (t1.c1 = t2.c1)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

\q
